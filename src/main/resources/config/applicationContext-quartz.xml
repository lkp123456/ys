<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!--&lt;!&ndash;
        Spring整合Quartz进行配置遵循下面的步骤：
        1：定义工作任务的Job
        2：定义触发器Trigger，并将触发器与工作任务绑定
        3：定义调度器，并将Trigger注册到Scheduler
     &ndash;&gt;
	&lt;!&ndash; 1：定义任务的bean ，这里使用JobDetailFactoryBean,也可以使用MethodInvokingJobDetailFactoryBean ，配置类似&ndash;&gt;
	<bean id="jobDetailFactory" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		&lt;!&ndash; 指定job的名称 &ndash;&gt;
		<property name="name" value="refreshAccessTokenJob"/>
		&lt;!&ndash; 指定job的分组 &ndash;&gt;
		<property name="group" value="job_group1"/>
		&lt;!&ndash; 指定具体的job类 &ndash;&gt;
		<property name="jobClass" value="com.xxx.service.quartz.RefreshAccessTokenJob"/>
		&lt;!&ndash; 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中会删除该任务  &ndash;&gt;
		<property name="durability" value="true"/>
		&lt;!&ndash; 指定spring容器的key，如果不设定在job中的jobmap中是获取不到spring容器的 &ndash;&gt;
		<property name="applicationContextJobDataKey" value="applicationContext"/>
	</bean>
	&lt;!&ndash; 2.1：定义触发器的bean，定义一个Simple的Trigger，一个触发器只能和一个任务进行绑定 &ndash;&gt;
	&lt;!&ndash; <bean name="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        指定Trigger的名称
        <property name="name" value="hw_trigger"/>
        指定Trigger的名称
        <property name="group" value="hw_trigger_group"/>
        指定Tirgger绑定的Job
        <property name="jobDetail" ref="hwJob"/>
        指定Trigger的延迟时间 1s后运行
        <property name="startDelay" value="1000"/>
        指定Trigger的重复间隔  5s
        <property name="repeatInterval" value="5000"/>
        指定Trigger的重复次数
        <property name="repeatCount" value="5"/>
    </bean> &ndash;&gt;

	&lt;!&ndash; 2.2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 &ndash;&gt;
	<bean id="refreshAccessTokenJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		&lt;!&ndash; 指定Trigger的名称 &ndash;&gt;
		<property name="name" value="refreshAccessTokenJob_Trigger"/>
		&lt;!&ndash; 指定Trigger的名称 &ndash;&gt;
		<property name="group" value="trigger_group1"/>
		&lt;!&ndash; 指定Tirgger绑定的Job &ndash;&gt;
		<property name="jobDetail" ref="jobDetailFactory"/>
		&lt;!&ndash; 指定Cron 的表达式 ，当前是每隔1s运行一次 &ndash;&gt;
		<property name="cronExpression" value="0 0/59 * * * ?" />
	</bean>


	<bean id="quartzJobFactory" class="com.xxx.service.quartz.QuartzJobFactory"></bean>

	&lt;!&ndash; 3.定义调度器，并将Trigger注册到调度器中 &ndash;&gt;
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="quartzJobFactory"></property>
		<property name="triggers">
			<list>
				&lt;!&ndash; <ref bean="simpleTrigger"/> &ndash;&gt;
				<ref bean="refreshAccessTokenJobTrigger"/>
			</list>
		</property>
		 <property name="autoStartup" value="true" />
	</bean>-->

</beans>